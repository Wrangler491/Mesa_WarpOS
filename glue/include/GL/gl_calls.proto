/* $Id: gl.h,v 3.26 1998/11/17 01:52:47 brianp Exp $ */

/*
 * Mesa 3-D graphics library
 * Version:  3.1
 * Copyright (C) 1995-1998  Brian Paul
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

amigaMesaBuffer amigaMesaCreateBufferTags(amigaMesaVisual, long Tag1,...);
amigaMesaBuffer amigaMesaCreateBuffer(amigaMesaVisual, struct TagItem *);
void amigaMesaDestroyBuffer(amigaMesaBuffer);
GLboolean amigaMesaChangeBufferTags(amigaMesaBuffer, long Tag1,...);
GLboolean amigaMesaChangeBuffer(amigaMesaBuffer, struct TagItem *);
void amigaMesaGetBufferTags(amigaMesaBuffer, long Tag1,...);
void amigaMesaGetBuffer(amigaMesaBuffer, struct TagItem *);
amigaMesaVisual amigaMesaCreateVisualTags(long Tag1,...);
amigaMesaVisual amigaMesaCreateVisual(struct TagItem *);
void amigaMesaDestroyVisual(amigaMesaVisual);
GLboolean amigaMesaChangeVisualTags(amigaMesaVisual, long Tag1,...);
GLboolean amigaMesaChangeVisual(amigaMesaVisual, struct TagItem *);
void amigaMesaGetVisualTags(amigaMesaVisual, long Tag1,...);
void amigaMesaGetVisual(amigaMesaVisual, struct TagItem *);
amigaMesaContext amigaMesaCreateContextTags(long Tag1,...);
amigaMesaContext amigaMesaCreateContext(struct TagItem *);
void amigaMesaDestroyContext(amigaMesaContext);
GLboolean amigaMesaChangeContextTags(amigaMesaContext, long Tag1,...);
GLboolean amigaMesaChangeContext(amigaMesaContext, struct TagItem *);
void amigaMesaGetContextTags(amigaMesaContext, long Tag1,...);
void amigaMesaGetContext(amigaMesaContext, struct TagItem *);
void amigaMesaSetOneColor(amigaMesaContext, GLuint, GLfloat r, GLfloat g, GLfloat b);
GLuint amigaMesaGetOneColor(amigaMesaContext, GLuint);
GLint amigaMesaNumColors(amigaMesaContext);
void amigaMesaMakeCurrent(amigaMesaContext, amigaMesaBuffer);
void amigaMesaSwapBuffers(amigaMesaContext);
GLboolean amigaMesaSetDefs(struct TagItem *tagList);
GLenum amigaMesaReportError(amigaMesaContext amesa);

WINGDIAPI void APIENTRY glClearIndex( GLfloat c );
WINGDIAPI void APIENTRY glClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
WINGDIAPI void APIENTRY glClear( GLbitfield mask );
WINGDIAPI void APIENTRY glIndexMask( GLuint mask );
WINGDIAPI void APIENTRY glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
WINGDIAPI void APIENTRY glAlphaFunc( GLenum func, GLclampf ref );
WINGDIAPI void APIENTRY glBlendFunc( GLenum sfactor, GLenum dfactor );
WINGDIAPI void APIENTRY glLogicOp( GLenum opcode );
WINGDIAPI void APIENTRY glCullFace( GLenum mode );
WINGDIAPI void APIENTRY glFrontFace( GLenum mode );
WINGDIAPI void APIENTRY glPointSize( GLfloat size );
WINGDIAPI void APIENTRY glLineWidth( GLfloat width );
WINGDIAPI void APIENTRY glLineStipple( GLint factor, GLushort pattern );
WINGDIAPI void APIENTRY glPolygonMode( GLenum face, GLenum mode );
WINGDIAPI void APIENTRY glPolygonOffset( GLfloat factor, GLfloat units );
WINGDIAPI void APIENTRY glPolygonStipple( const GLubyte *mask );
WINGDIAPI void APIENTRY glGetPolygonStipple( GLubyte *mask );
WINGDIAPI void APIENTRY glEdgeFlag( GLboolean flag );
WINGDIAPI void APIENTRY glEdgeFlagv( const GLboolean *flag );
WINGDIAPI void APIENTRY glScissor( GLint x, GLint y, GLsizei width, GLsizei height);
WINGDIAPI void APIENTRY glClipPlane( GLenum plane, const GLdouble *equation );
WINGDIAPI void APIENTRY glGetClipPlane( GLenum plane, GLdouble *equation );
WINGDIAPI void APIENTRY glDrawBuffer( GLenum mode );
WINGDIAPI void APIENTRY glReadBuffer( GLenum mode );
WINGDIAPI void APIENTRY glEnable( GLenum cap );
WINGDIAPI void APIENTRY glDisable( GLenum cap );
WINGDIAPI GLboolean APIENTRY glIsEnabled( GLenum cap );
WINGDIAPI void APIENTRY glEnableClientState( GLenum cap );
WINGDIAPI void APIENTRY glDisableClientState( GLenum cap );
WINGDIAPI void APIENTRY glGetBooleanv( GLenum pname, GLboolean *params );
WINGDIAPI void APIENTRY glGetDoublev( GLenum pname, GLdouble *params );
WINGDIAPI void APIENTRY glGetFloatv( GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetIntegerv( GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glPushAttrib( GLbitfield mask );
WINGDIAPI void APIENTRY glPopAttrib( void );
WINGDIAPI void APIENTRY glPushClientAttrib( GLbitfield mask );
WINGDIAPI void APIENTRY glPopClientAttrib( void );
WINGDIAPI GLint APIENTRY glRenderMode( GLenum mode );
WINGDIAPI GLenum APIENTRY glGetError( void );
WINGDIAPI const GLubyte* APIENTRY glGetString( GLenum name );
WINGDIAPI void APIENTRY glFinish( void );
WINGDIAPI void APIENTRY glFlush( void );
WINGDIAPI void APIENTRY glHint( GLenum target, GLenum mode );
WINGDIAPI void APIENTRY glClearDepth( GLclampd depth );
WINGDIAPI void APIENTRY glDepthFunc( GLenum func );
WINGDIAPI void APIENTRY glDepthMask( GLboolean flag );
WINGDIAPI void APIENTRY glDepthRange( GLclampd near_val, GLclampd far_val );
WINGDIAPI void APIENTRY glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
WINGDIAPI void APIENTRY glAccum( GLenum op, GLfloat value );
WINGDIAPI void APIENTRY glMatrixMode( GLenum mode );
WINGDIAPI void APIENTRY glOrtho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
WINGDIAPI void APIENTRY glFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
WINGDIAPI void APIENTRY glViewport( GLint x, GLint y, GLsizei width, GLsizei height );
WINGDIAPI void APIENTRY glPushMatrix( void );
WINGDIAPI void APIENTRY glPopMatrix( void );
WINGDIAPI void APIENTRY glLoadIdentity( void );
WINGDIAPI void APIENTRY glLoadMatrixd( const GLdouble *m );
WINGDIAPI void APIENTRY glLoadMatrixf( const GLfloat *m );
WINGDIAPI void APIENTRY glMultMatrixd( const GLdouble *m );
WINGDIAPI void APIENTRY glMultMatrixf( const GLfloat *m );
WINGDIAPI void APIENTRY glRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
WINGDIAPI void APIENTRY glRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
WINGDIAPI void APIENTRY glScaled( GLdouble x, GLdouble y, GLdouble z );
WINGDIAPI void APIENTRY glScalef( GLfloat x, GLfloat y, GLfloat z );
WINGDIAPI void APIENTRY glTranslated( GLdouble x, GLdouble y, GLdouble z );
WINGDIAPI void APIENTRY glTranslatef( GLfloat x, GLfloat y, GLfloat z );
WINGDIAPI GLboolean APIENTRY glIsList( GLuint list );
WINGDIAPI void APIENTRY glDeleteLists( GLuint list, GLsizei range );
WINGDIAPI GLuint APIENTRY glGenLists( GLsizei range );
WINGDIAPI void APIENTRY glNewList( GLuint list, GLenum mode );
WINGDIAPI void APIENTRY glEndList( void );
WINGDIAPI void APIENTRY glCallList( GLuint list );
WINGDIAPI void APIENTRY glCallLists( GLsizei n, GLenum type, const GLvoid *lists );
WINGDIAPI void APIENTRY glListBase( GLuint base );
WINGDIAPI void APIENTRY glBegin( GLenum mode );
WINGDIAPI void APIENTRY glEnd( void );
WINGDIAPI void APIENTRY glVertex2d( GLdouble x, GLdouble y );
WINGDIAPI void APIENTRY glVertex2f( GLfloat x, GLfloat y );
WINGDIAPI void APIENTRY glVertex2i( GLint x, GLint y );
WINGDIAPI void APIENTRY glVertex2s( GLshort x, GLshort y );
WINGDIAPI void APIENTRY glVertex3d( GLdouble x, GLdouble y, GLdouble z );
WINGDIAPI void APIENTRY glVertex3f( GLfloat x, GLfloat y, GLfloat z );
WINGDIAPI void APIENTRY glVertex3i( GLint x, GLint y, GLint z );
WINGDIAPI void APIENTRY glVertex3s( GLshort x, GLshort y, GLshort z );
WINGDIAPI void APIENTRY glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
WINGDIAPI void APIENTRY glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
WINGDIAPI void APIENTRY glVertex4i( GLint x, GLint y, GLint z, GLint w );
WINGDIAPI void APIENTRY glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w );
WINGDIAPI void APIENTRY glVertex2dv( const GLdouble *v );
WINGDIAPI void APIENTRY glVertex2fv( const GLfloat *v );
WINGDIAPI void APIENTRY glVertex2iv( const GLint *v );
WINGDIAPI void APIENTRY glVertex2sv( const GLshort *v );
WINGDIAPI void APIENTRY glVertex3dv( const GLdouble *v );
WINGDIAPI void APIENTRY glVertex3fv( const GLfloat *v );
WINGDIAPI void APIENTRY glVertex3iv( const GLint *v );
WINGDIAPI void APIENTRY glVertex3sv( const GLshort *v );
WINGDIAPI void APIENTRY glVertex4dv( const GLdouble *v );
WINGDIAPI void APIENTRY glVertex4fv( const GLfloat *v );
WINGDIAPI void APIENTRY glVertex4iv( const GLint *v );
WINGDIAPI void APIENTRY glVertex4sv( const GLshort *v );
WINGDIAPI void APIENTRY glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz );
WINGDIAPI void APIENTRY glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz );
WINGDIAPI void APIENTRY glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz );
WINGDIAPI void APIENTRY glNormal3i( GLint nx, GLint ny, GLint nz );
WINGDIAPI void APIENTRY glNormal3s( GLshort nx, GLshort ny, GLshort nz );
WINGDIAPI void APIENTRY glNormal3bv( const GLbyte *v );
WINGDIAPI void APIENTRY glNormal3dv( const GLdouble *v );
WINGDIAPI void APIENTRY glNormal3fv( const GLfloat *v );
WINGDIAPI void APIENTRY glNormal3iv( const GLint *v );
WINGDIAPI void APIENTRY glNormal3sv( const GLshort *v );
WINGDIAPI void APIENTRY glIndexd( GLdouble c );
WINGDIAPI void APIENTRY glIndexf( GLfloat c );
WINGDIAPI void APIENTRY glIndexi( GLint c );
WINGDIAPI void APIENTRY glIndexs( GLshort c );
WINGDIAPI void APIENTRY glIndexub( GLubyte c );
WINGDIAPI void APIENTRY glIndexdv( const GLdouble *c );
WINGDIAPI void APIENTRY glIndexfv( const GLfloat *c );
WINGDIAPI void APIENTRY glIndexiv( const GLint *c );
WINGDIAPI void APIENTRY glIndexsv( const GLshort *c );
WINGDIAPI void APIENTRY glIndexubv( const GLubyte *c );
WINGDIAPI void APIENTRY glColor3b( GLbyte red, GLbyte green, GLbyte blue );
WINGDIAPI void APIENTRY glColor3d( GLdouble red, GLdouble green, GLdouble blue );
WINGDIAPI void APIENTRY glColor3f( GLfloat red, GLfloat green, GLfloat blue );
WINGDIAPI void APIENTRY glColor3i( GLint red, GLint green, GLint blue );
WINGDIAPI void APIENTRY glColor3s( GLshort red, GLshort green, GLshort blue );
WINGDIAPI void APIENTRY glColor3ub( GLubyte red, GLubyte green, GLubyte blue );
WINGDIAPI void APIENTRY glColor3ui( GLuint red, GLuint green, GLuint blue );
WINGDIAPI void APIENTRY glColor3us( GLushort red, GLushort green, GLushort blue );
WINGDIAPI void APIENTRY glColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
WINGDIAPI void APIENTRY glColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
WINGDIAPI void APIENTRY glColor4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
WINGDIAPI void APIENTRY glColor4i( GLint red, GLint green, GLint blue, GLint alpha );
WINGDIAPI void APIENTRY glColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha );
WINGDIAPI void APIENTRY glColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
WINGDIAPI void APIENTRY glColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha );
WINGDIAPI void APIENTRY glColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha );
WINGDIAPI void APIENTRY glColor3bv( const GLbyte *v );
WINGDIAPI void APIENTRY glColor3dv( const GLdouble *v );
WINGDIAPI void APIENTRY glColor3fv( const GLfloat *v );
WINGDIAPI void APIENTRY glColor3iv( const GLint *v );
WINGDIAPI void APIENTRY glColor3sv( const GLshort *v );
WINGDIAPI void APIENTRY glColor3ubv( const GLubyte *v );
WINGDIAPI void APIENTRY glColor3uiv( const GLuint *v );
WINGDIAPI void APIENTRY glColor3usv( const GLushort *v );
WINGDIAPI void APIENTRY glColor4bv( const GLbyte *v );
WINGDIAPI void APIENTRY glColor4dv( const GLdouble *v );
WINGDIAPI void APIENTRY glColor4fv( const GLfloat *v );
WINGDIAPI void APIENTRY glColor4iv( const GLint *v );
WINGDIAPI void APIENTRY glColor4sv( const GLshort *v );
WINGDIAPI void APIENTRY glColor4ubv( const GLubyte *v );
WINGDIAPI void APIENTRY glColor4uiv( const GLuint *v );
WINGDIAPI void APIENTRY glColor4usv( const GLushort *v );
WINGDIAPI void APIENTRY glTexCoord1d( GLdouble s );
WINGDIAPI void APIENTRY glTexCoord1f( GLfloat s );
WINGDIAPI void APIENTRY glTexCoord1i( GLint s );
WINGDIAPI void APIENTRY glTexCoord1s( GLshort s );
WINGDIAPI void APIENTRY glTexCoord2d( GLdouble s, GLdouble t );
WINGDIAPI void APIENTRY glTexCoord2f( GLfloat s, GLfloat t );
WINGDIAPI void APIENTRY glTexCoord2i( GLint s, GLint t );
WINGDIAPI void APIENTRY glTexCoord2s( GLshort s, GLshort t );
WINGDIAPI void APIENTRY glTexCoord3d( GLdouble s, GLdouble t, GLdouble r );
WINGDIAPI void APIENTRY glTexCoord3f( GLfloat s, GLfloat t, GLfloat r );
WINGDIAPI void APIENTRY glTexCoord3i( GLint s, GLint t, GLint r );
WINGDIAPI void APIENTRY glTexCoord3s( GLshort s, GLshort t, GLshort r );
WINGDIAPI void APIENTRY glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
WINGDIAPI void APIENTRY glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
WINGDIAPI void APIENTRY glTexCoord4i( GLint s, GLint t, GLint r, GLint q );
WINGDIAPI void APIENTRY glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );
WINGDIAPI void APIENTRY glTexCoord1dv( const GLdouble *v );
WINGDIAPI void APIENTRY glTexCoord1fv( const GLfloat *v );
WINGDIAPI void APIENTRY glTexCoord1iv( const GLint *v );
WINGDIAPI void APIENTRY glTexCoord1sv( const GLshort *v );
WINGDIAPI void APIENTRY glTexCoord2dv( const GLdouble *v );
WINGDIAPI void APIENTRY glTexCoord2fv( const GLfloat *v );
WINGDIAPI void APIENTRY glTexCoord2iv( const GLint *v );
WINGDIAPI void APIENTRY glTexCoord2sv( const GLshort *v );
WINGDIAPI void APIENTRY glTexCoord3dv( const GLdouble *v );
WINGDIAPI void APIENTRY glTexCoord3fv( const GLfloat *v );
WINGDIAPI void APIENTRY glTexCoord3iv( const GLint *v );
WINGDIAPI void APIENTRY glTexCoord3sv( const GLshort *v );
WINGDIAPI void APIENTRY glTexCoord4dv( const GLdouble *v );
WINGDIAPI void APIENTRY glTexCoord4fv( const GLfloat *v );
WINGDIAPI void APIENTRY glTexCoord4iv( const GLint *v );
WINGDIAPI void APIENTRY glTexCoord4sv( const GLshort *v );
WINGDIAPI void APIENTRY glRasterPos2d( GLdouble x, GLdouble y );
WINGDIAPI void APIENTRY glRasterPos2f( GLfloat x, GLfloat y );
WINGDIAPI void APIENTRY glRasterPos2i( GLint x, GLint y );
WINGDIAPI void APIENTRY glRasterPos2s( GLshort x, GLshort y );
WINGDIAPI void APIENTRY glRasterPos3d( GLdouble x, GLdouble y, GLdouble z );
WINGDIAPI void APIENTRY glRasterPos3f( GLfloat x, GLfloat y, GLfloat z );
WINGDIAPI void APIENTRY glRasterPos3i( GLint x, GLint y, GLint z );
WINGDIAPI void APIENTRY glRasterPos3s( GLshort x, GLshort y, GLshort z );
WINGDIAPI void APIENTRY glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
WINGDIAPI void APIENTRY glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
WINGDIAPI void APIENTRY glRasterPos4i( GLint x, GLint y, GLint z, GLint w );
WINGDIAPI void APIENTRY glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );
WINGDIAPI void APIENTRY glRasterPos2dv( const GLdouble *v );
WINGDIAPI void APIENTRY glRasterPos2fv( const GLfloat *v );
WINGDIAPI void APIENTRY glRasterPos2iv( const GLint *v );
WINGDIAPI void APIENTRY glRasterPos2sv( const GLshort *v );
WINGDIAPI void APIENTRY glRasterPos3dv( const GLdouble *v );
WINGDIAPI void APIENTRY glRasterPos3fv( const GLfloat *v );
WINGDIAPI void APIENTRY glRasterPos3iv( const GLint *v );
WINGDIAPI void APIENTRY glRasterPos3sv( const GLshort *v );
WINGDIAPI void APIENTRY glRasterPos4dv( const GLdouble *v );
WINGDIAPI void APIENTRY glRasterPos4fv( const GLfloat *v );
WINGDIAPI void APIENTRY glRasterPos4iv( const GLint *v );
WINGDIAPI void APIENTRY glRasterPos4sv( const GLshort *v );
WINGDIAPI void APIENTRY glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
WINGDIAPI void APIENTRY glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
WINGDIAPI void APIENTRY glRecti( GLint x1, GLint y1, GLint x2, GLint y2 );
WINGDIAPI void APIENTRY glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
WINGDIAPI void APIENTRY glRectdv( const GLdouble *v1, const GLdouble *v2 );
WINGDIAPI void APIENTRY glRectfv( const GLfloat *v1, const GLfloat *v2 );
WINGDIAPI void APIENTRY glRectiv( const GLint *v1, const GLint *v2 );
WINGDIAPI void APIENTRY glRectsv( const GLshort *v1, const GLshort *v2 );
WINGDIAPI void APIENTRY glVertexPointer( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
WINGDIAPI void APIENTRY glNormalPointer( GLenum type, GLsizei stride, const GLvoid *ptr );
WINGDIAPI void APIENTRY glColorPointer( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
WINGDIAPI void APIENTRY glIndexPointer( GLenum type, GLsizei stride, const GLvoid *ptr );
WINGDIAPI void APIENTRY glTexCoordPointer( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
WINGDIAPI void APIENTRY glEdgeFlagPointer( GLsizei stride, const GLvoid *ptr );
WINGDIAPI void APIENTRY glGetPointerv( GLenum pname, void **params );
WINGDIAPI void APIENTRY glArrayElement( GLint i );
WINGDIAPI void APIENTRY glDrawArrays( GLenum mode, GLint first, GLsizei count );
WINGDIAPI void APIENTRY glDrawElements( GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
WINGDIAPI void APIENTRY glInterleavedArrays( GLenum format, GLsizei stride, const GLvoid *pointer );
WINGDIAPI void APIENTRY glShadeModel( GLenum mode );
WINGDIAPI void APIENTRY glLightf( GLenum light, GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glLighti( GLenum light, GLenum pname, GLint param );
WINGDIAPI void APIENTRY glLightfv( GLenum light, GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glLightiv( GLenum light, GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glGetLightfv( GLenum light, GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetLightiv( GLenum light, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glLightModelf( GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glLightModeli( GLenum pname, GLint param );
WINGDIAPI void APIENTRY glLightModelfv( GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glLightModeliv( GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glMaterialf( GLenum face, GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glMateriali( GLenum face, GLenum pname, GLint param );
WINGDIAPI void APIENTRY glMaterialfv( GLenum face, GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glMaterialiv( GLenum face, GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetMaterialiv( GLenum face, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glColorMaterial( GLenum face, GLenum mode );
WINGDIAPI void APIENTRY glPixelZoom( GLfloat xfactor, GLfloat yfactor );
WINGDIAPI void APIENTRY glPixelStoref( GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glPixelStorei( GLenum pname, GLint param );
WINGDIAPI void APIENTRY glPixelTransferf( GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glPixelTransferi( GLenum pname, GLint param );
WINGDIAPI void APIENTRY glPixelMapfv( GLenum map, GLint mapsize, const GLfloat *values );
WINGDIAPI void APIENTRY glPixelMapuiv( GLenum map, GLint mapsize, const GLuint *values );
WINGDIAPI void APIENTRY glPixelMapusv( GLenum map, GLint mapsize, const GLushort *values );
WINGDIAPI void APIENTRY glGetPixelMapfv( GLenum map, GLfloat *values );
WINGDIAPI void APIENTRY glGetPixelMapuiv( GLenum map, GLuint *values );
WINGDIAPI void APIENTRY glGetPixelMapusv( GLenum map, GLushort *values );
WINGDIAPI void APIENTRY glBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
WINGDIAPI void APIENTRY glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
WINGDIAPI void APIENTRY glDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
WINGDIAPI void APIENTRY glCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
WINGDIAPI void APIENTRY glStencilFunc( GLenum func, GLint ref, GLuint mask );
WINGDIAPI void APIENTRY glStencilMask( GLuint mask );
WINGDIAPI void APIENTRY glStencilOp( GLenum fail, GLenum zfail, GLenum zpass );
WINGDIAPI void APIENTRY glClearStencil( GLint s );
WINGDIAPI void APIENTRY glTexGend( GLenum coord, GLenum pname, GLdouble param );
WINGDIAPI void APIENTRY glTexGenf( GLenum coord, GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glTexGeni( GLenum coord, GLenum pname, GLint param );
WINGDIAPI void APIENTRY glTexGendv( GLenum coord, GLenum pname, const GLdouble *params );
WINGDIAPI void APIENTRY glTexGenfv( GLenum coord, GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glTexGeniv( GLenum coord, GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params );
WINGDIAPI void APIENTRY glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetTexGeniv( GLenum coord, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glTexEnvf( GLenum target, GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glTexEnvi( GLenum target, GLenum pname, GLint param );
WINGDIAPI void APIENTRY glTexEnvfv( GLenum target, GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glTexEnviv( GLenum target, GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetTexEnviv( GLenum target, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glTexParameterf( GLenum target, GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glTexParameteri( GLenum target, GLenum pname, GLint param );
WINGDIAPI void APIENTRY glTexParameterfv( GLenum target, GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glTexParameteriv( GLenum target, GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glGetTexParameterfv( GLenum target, GLenum pname, GLfloat *params);
WINGDIAPI void APIENTRY glGetTexParameteriv( GLenum target, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glTexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
WINGDIAPI void APIENTRY glTexImage2D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
WINGDIAPI void APIENTRY glGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
WINGDIAPI void APIENTRY glGenTextures( GLsizei n, GLuint *textures );
WINGDIAPI void APIENTRY glDeleteTextures( GLsizei n, const GLuint *textures);
WINGDIAPI void APIENTRY glBindTexture( GLenum target, GLuint texture );
WINGDIAPI void APIENTRY glPrioritizeTextures( GLsizei n, const GLuint *textures, const GLclampf *priorities );
WINGDIAPI GLboolean APIENTRY glAreTexturesResident( GLsizei n, const GLuint *textures, GLboolean *residences );
WINGDIAPI GLboolean APIENTRY glIsTexture( GLuint texture );
WINGDIAPI void APIENTRY glTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels );
WINGDIAPI void APIENTRY glTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
WINGDIAPI void APIENTRY glCopyTexImage1D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
WINGDIAPI void APIENTRY glCopyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
WINGDIAPI void APIENTRY glCopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
WINGDIAPI void APIENTRY glCopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
WINGDIAPI void APIENTRY glMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
WINGDIAPI void APIENTRY glMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
WINGDIAPI void APIENTRY glMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble *points );
WINGDIAPI void APIENTRY glMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat *points );
WINGDIAPI void APIENTRY glGetMapdv( GLenum target, GLenum query, GLdouble *v );
WINGDIAPI void APIENTRY glGetMapfv( GLenum target, GLenum query, GLfloat *v );
WINGDIAPI void APIENTRY glGetMapiv( GLenum target, GLenum query, GLint *v );
WINGDIAPI void APIENTRY glEvalCoord1d( GLdouble u );
WINGDIAPI void APIENTRY glEvalCoord1f( GLfloat u );
WINGDIAPI void APIENTRY glEvalCoord1dv( const GLdouble *u );
WINGDIAPI void APIENTRY glEvalCoord1fv( const GLfloat *u );
WINGDIAPI void APIENTRY glEvalCoord2d( GLdouble u, GLdouble v );
WINGDIAPI void APIENTRY glEvalCoord2f( GLfloat u, GLfloat v );
WINGDIAPI void APIENTRY glEvalCoord2dv( const GLdouble *u );
WINGDIAPI void APIENTRY glEvalCoord2fv( const GLfloat *u );
WINGDIAPI void APIENTRY glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
WINGDIAPI void APIENTRY glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
WINGDIAPI void APIENTRY glMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
WINGDIAPI void APIENTRY glMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
WINGDIAPI void APIENTRY glEvalPoint1( GLint i );
WINGDIAPI void APIENTRY glEvalPoint2( GLint i, GLint j );
WINGDIAPI void APIENTRY glEvalMesh1( GLenum mode, GLint i1, GLint i2 );
WINGDIAPI void APIENTRY glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
WINGDIAPI void APIENTRY glFogf( GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glFogi( GLenum pname, GLint param );
WINGDIAPI void APIENTRY glFogfv( GLenum pname, const GLfloat *params );
WINGDIAPI void APIENTRY glFogiv( GLenum pname, const GLint *params );
WINGDIAPI void APIENTRY glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer );
WINGDIAPI void APIENTRY glPassThrough( GLfloat token );
WINGDIAPI void APIENTRY glSelectBuffer( GLsizei size, GLuint *buffer );
WINGDIAPI void APIENTRY glInitNames( void );
WINGDIAPI void APIENTRY glLoadName( GLuint name );
WINGDIAPI void APIENTRY glPushName( GLuint name );
WINGDIAPI void APIENTRY glPopName( void );
WINGDIAPI void APIENTRY glBlendEquationEXT( GLenum mode );
WINGDIAPI void APIENTRY glBlendColorEXT( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
WINGDIAPI void APIENTRY glPolygonOffsetEXT( GLfloat factor, GLfloat bias );
WINGDIAPI void APIENTRY glVertexPointerEXT( GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *ptr );
WINGDIAPI void APIENTRY glNormalPointerEXT( GLenum type, GLsizei stride, GLsizei count, const GLvoid *ptr );
WINGDIAPI void APIENTRY glColorPointerEXT( GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *ptr );
WINGDIAPI void APIENTRY glIndexPointerEXT( GLenum type, GLsizei stride, GLsizei count, const GLvoid *ptr );
WINGDIAPI void APIENTRY glTexCoordPointerEXT( GLint size, GLenum type, GLsizei stride, GLsizei count, GLvoid *ptr );
WINGDIAPI void APIENTRY glEdgeFlagPointerEXT( GLsizei stride, GLsizei count, GLboolean *ptr );
WINGDIAPI void APIENTRY glGetPointervEXT( GLenum pname, void **params );
WINGDIAPI void APIENTRY glArrayElementEXT( GLint i );
WINGDIAPI void APIENTRY glDrawArraysEXT( GLenum mode, GLint first, GLsizei count );
WINGDIAPI void APIENTRY glGenTexturesEXT( GLsizei n, GLuint *textures );
WINGDIAPI void APIENTRY glDeleteTexturesEXT( GLsizei n, GLuint *textures);
WINGDIAPI void APIENTRY glBindTextureEXT( GLenum target, GLuint texture );
WINGDIAPI void APIENTRY glPrioritizeTexturesEXT( GLsizei n, GLuint *textures, GLclampf *priorities );
WINGDIAPI GLboolean APIENTRY glAreTexturesResidentEXT( GLsizei n, GLuint *textures, GLboolean *residences );
WINGDIAPI GLboolean APIENTRY glIsTextureEXT( GLuint texture );
WINGDIAPI void APIENTRY glTexImage3DEXT( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid *pixels );
WINGDIAPI void APIENTRY glTexSubImage3DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
WINGDIAPI void APIENTRY glCopyTexSubImage3DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
WINGDIAPI void APIENTRY glColorTableEXT( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table );
WINGDIAPI void APIENTRY glColorSubTableEXT( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, GLvoid *data );
WINGDIAPI void APIENTRY glGetColorTableEXT( GLenum target, GLenum format, GLenum type, GLvoid *table );
WINGDIAPI void APIENTRY glGetColorTableParameterfvEXT( GLenum target, GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glGetColorTableParameterivEXT( GLenum target, GLenum pname, GLint *params );
WINGDIAPI void APIENTRY glMultiTexCoord1dSGIS(GLenum target, GLdouble s);
WINGDIAPI void APIENTRY glMultiTexCoord1dvSGIS(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord1fSGIS(GLenum target, GLfloat s);
WINGDIAPI void APIENTRY glMultiTexCoord1fvSGIS(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord1iSGIS(GLenum target, GLint s);
WINGDIAPI void APIENTRY glMultiTexCoord1ivSGIS(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord1sSGIS(GLenum target, GLshort s);
WINGDIAPI void APIENTRY glMultiTexCoord1svSGIS(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoord2dSGIS(GLenum target, GLdouble s, GLdouble t);
WINGDIAPI void APIENTRY glMultiTexCoord2dvSGIS(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord2fSGIS(GLenum target, GLfloat s, GLfloat t);
WINGDIAPI void APIENTRY glMultiTexCoord2fvSGIS(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord2iSGIS(GLenum target, GLint s, GLint t);
WINGDIAPI void APIENTRY glMultiTexCoord2ivSGIS(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord2sSGIS(GLenum target, GLshort s, GLshort t);
WINGDIAPI void APIENTRY glMultiTexCoord2svSGIS(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoord3dSGIS(GLenum target, GLdouble s, GLdouble t, GLdouble r);
WINGDIAPI void APIENTRY glMultiTexCoord3dvSGIS(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord3fSGIS(GLenum target, GLfloat s, GLfloat t, GLfloat r);
WINGDIAPI void APIENTRY glMultiTexCoord3fvSGIS(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord3iSGIS(GLenum target, GLint s, GLint t, GLint r);
WINGDIAPI void APIENTRY glMultiTexCoord3ivSGIS(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord3sSGIS(GLenum target, GLshort s, GLshort t, GLshort r);
WINGDIAPI void APIENTRY glMultiTexCoord3svSGIS(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoord4dSGIS(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
WINGDIAPI void APIENTRY glMultiTexCoord4dvSGIS(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord4fSGIS(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
WINGDIAPI void APIENTRY glMultiTexCoord4fvSGIS(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord4iSGIS(GLenum target, GLint s, GLint t, GLint r, GLint q);
WINGDIAPI void APIENTRY glMultiTexCoord4ivSGIS(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord4sSGIS(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
WINGDIAPI void APIENTRY glMultiTexCoord4svSGIS(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoordPointerSGIS(GLenum target, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
WINGDIAPI void APIENTRY glSelectTextureSGIS(GLenum target);
WINGDIAPI void APIENTRY glSelectTextureCoordSetSGIS(GLenum target);
WINGDIAPI void APIENTRY glActiveTextureARB(GLenum texture);
WINGDIAPI void APIENTRY glClientActiveTextureARB(GLenum texture);
WINGDIAPI void APIENTRY glMultiTexCoord1dARB(GLenum target, GLdouble s);
WINGDIAPI void APIENTRY glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord1fARB(GLenum target, GLfloat s);
WINGDIAPI void APIENTRY glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord1iARB(GLenum target, GLint s);
WINGDIAPI void APIENTRY glMultiTexCoord1ivARB(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord1sARB(GLenum target, GLshort s);
WINGDIAPI void APIENTRY glMultiTexCoord1svARB(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
WINGDIAPI void APIENTRY glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
WINGDIAPI void APIENTRY glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
WINGDIAPI void APIENTRY glMultiTexCoord2ivARB(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
WINGDIAPI void APIENTRY glMultiTexCoord2svARB(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
WINGDIAPI void APIENTRY glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
WINGDIAPI void APIENTRY glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
WINGDIAPI void APIENTRY glMultiTexCoord3ivARB(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
WINGDIAPI void APIENTRY glMultiTexCoord3svARB(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
WINGDIAPI void APIENTRY glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
WINGDIAPI void APIENTRY glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
WINGDIAPI void APIENTRY glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
WINGDIAPI void APIENTRY glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
WINGDIAPI void APIENTRY glMultiTexCoord4ivARB(GLenum target, const GLint *v);
WINGDIAPI void APIENTRY glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
WINGDIAPI void APIENTRY glMultiTexCoord4svARB(GLenum target, const GLshort *v);
WINGDIAPI void APIENTRY glPointParameterfEXT( GLenum pname, GLfloat param );
WINGDIAPI void APIENTRY glPointParameterfvEXT( GLenum pname, GLfloat *params );
WINGDIAPI void APIENTRY glBlendFuncSeparateINGR( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
WINGDIAPI void APIENTRY glWindowPos2iMESA( GLint x, GLint y );
WINGDIAPI void APIENTRY glWindowPos2sMESA( GLshort x, GLshort y );
WINGDIAPI void APIENTRY glWindowPos2fMESA( GLfloat x, GLfloat y );
WINGDIAPI void APIENTRY glWindowPos2dMESA( GLdouble x, GLdouble y );
WINGDIAPI void APIENTRY glWindowPos2ivMESA( const GLint *p );
WINGDIAPI void APIENTRY glWindowPos2svMESA( const GLshort *p );
WINGDIAPI void APIENTRY glWindowPos2fvMESA( const GLfloat *p );
WINGDIAPI void APIENTRY glWindowPos2dvMESA( const GLdouble *p );
WINGDIAPI void APIENTRY glWindowPos3iMESA( GLint x, GLint y, GLint z );
WINGDIAPI void APIENTRY glWindowPos3sMESA( GLshort x, GLshort y, GLshort z );
WINGDIAPI void APIENTRY glWindowPos3fMESA( GLfloat x, GLfloat y, GLfloat z );
WINGDIAPI void APIENTRY glWindowPos3dMESA( GLdouble x, GLdouble y, GLdouble z );
WINGDIAPI void APIENTRY glWindowPos3ivMESA( const GLint *p );
WINGDIAPI void APIENTRY glWindowPos3svMESA( const GLshort *p );
WINGDIAPI void APIENTRY glWindowPos3fvMESA( const GLfloat *p );
WINGDIAPI void APIENTRY glWindowPos3dvMESA( const GLdouble *p );
WINGDIAPI void APIENTRY glWindowPos4iMESA( GLint x, GLint y, GLint z, GLint w );
WINGDIAPI void APIENTRY glWindowPos4sMESA( GLshort x, GLshort y, GLshort z, GLshort w );
WINGDIAPI void APIENTRY glWindowPos4fMESA( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
WINGDIAPI void APIENTRY glWindowPos4dMESA( GLdouble x, GLdouble y, GLdouble z, GLdouble w);
WINGDIAPI void APIENTRY glWindowPos4ivMESA( const GLint *p );
WINGDIAPI void APIENTRY glWindowPos4svMESA( const GLshort *p );
WINGDIAPI void APIENTRY glWindowPos4fvMESA( const GLfloat *p );
WINGDIAPI void APIENTRY glWindowPos4dvMESA( const GLdouble *p );
WINGDIAPI void APIENTRY glResizeBuffersMESA( void );
WINGDIAPI void APIENTRY glDrawRangeElements( GLenum mode, GLuint start,	GLuint end, GLsizei count, GLenum type, const GLvoid *indices );
WINGDIAPI void APIENTRY glTexImage3D( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid *pixels );
WINGDIAPI void APIENTRY glTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
WINGDIAPI void APIENTRY glCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );

WINGDIAPI OSMesaContext APIENTRY OSMesaCreateContext( GLenum format,
                                          OSMesaContext sharelist );
WINGDIAPI void APIENTRY OSMesaDestroyContext( OSMesaContext ctx );
WINGDIAPI GLboolean APIENTRY OSMesaMakeCurrent( OSMesaContext ctx,
                                    void *buffer, GLenum type,
                                    GLsizei width, GLsizei height );
WINGDIAPI OSMesaContext APIENTRY OSMesaGetCurrentContext( void );
WINGDIAPI void APIENTRY OSMesaPixelStore( GLint pname, GLint value );
WINGDIAPI void APIENTRY OSMesaGetIntegerv( GLint pname, GLint *value );
WINGDIAPI GLboolean APIENTRY OSMesaGetDepthBuffer( OSMesaContext c,
                                       GLint *width, GLint *height,
                                       GLint *bytesPerValue, void **buffer );
